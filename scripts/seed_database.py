# seed_database.py

import os
import pandas as pd
from sqlalchemy import create_engine
from dotenv import load_dotenv
from pathlib import Path

# --- Configura√ß√µes ---
load_dotenv() # Carrega vari√°veis do .env
BASE_DIR = Path(__file__).resolve().parent.parent
RAW_DATA_PATH = BASE_DIR / "data" / "raw" / "WA_Fn-UseC_-HR-Employee-Attrition.csv"
TABLE_NAME = "employees"

# Pega a URL do banco de dados do arquivo .env
DATABASE_URL = os.getenv("DATABASE_URL")

def seed_database():
    """
    L√™ dados do CSV e os carrega em uma tabela no PostgreSQL,
    substituindo-a se j√° existir.
    """
    print("üöÄ Iniciando a carga de dados para o PostgreSQL...")

    if not DATABASE_URL:
        print("‚ùå ERRO: A vari√°vel de ambiente DATABASE_URL n√£o foi definida no arquivo .env.")
        return
    
    if not RAW_DATA_PATH.exists():
        print(f"‚ùå ERRO: Arquivo de dados n√£o encontrado em: {RAW_DATA_PATH}")
        return

    try:
        engine = create_engine(DATABASE_URL)
        df = pd.read_csv(RAW_DATA_PATH)
        print(f"‚úî Arquivo CSV lido com sucesso ({len(df)} linhas).")

        # Converte nomes de colunas para min√∫sculas para evitar problemas de case no SQL
        df.columns = df.columns.str.lower()
        
        with engine.connect() as conn:
            # Usando 'if_exists="replace"' para apagar e recriar a tabela
            df.to_sql(TABLE_NAME, conn, if_exists="replace", index=False)
            print(f"‚úî Dados salvos com sucesso na tabela '{TABLE_NAME}' no PostgreSQL.")

        print("\nüèõÔ∏è - Marco Conclu√≠do: Banco de dados PostgreSQL populado com sucesso!")

    except Exception as e:
        print(f"‚ùå Ocorreu um erro inesperado durante a conex√£o ou carga para o PostgreSQL: {e}")

if __name__ == "__main__":
    seed_database()
import os
import pandas as pd
import sqlite3
from sqlalchemy import create_engine
from dotenv import load_dotenv
from pathlib import Path
import sys

project_root = Path(__file__).resolve().parent.parent
sys.path.insert(0, str(project_root))

load_dotenv()

# --- CAMINHOS E CONFIGURA√á√ïES ---
SQLITE_DB_PATH = project_root / "database" / "hr_analytics.db"
POSTGRES_URL = os.getenv("DATABASE_URL")

def migrate_data():
    """
    L√™ a tabela 'employees' do SQLite e a escreve no PostgreSQL.
    """
    if not POSTGRES_URL:
        print("‚ùå Erro: A vari√°vel de ambiente DATABASE_URL n√£o foi encontrada.")
        print("Verifique se o seu arquivo .env est√° configurado corretamente.")
        return

    print("Iniciando a migra√ß√£o de dados...")

    try:
       
        print(f"üìñ Lendo dados do SQLite em: {SQLITE_DB_PATH}")
        with sqlite3.connect(SQLITE_DB_PATH) as conn:
            df = pd.read_sql_query("SELECT * FROM employees", conn)
        print(f"‚úÖ {len(df)} registros lidos do SQLite.")
        
        print("üîó Conectando ao PostgreSQL...")
        engine = create_engine(POSTGRES_URL)
        
        print("‚è≥ Gravando dados na tabela 'employees' do PostgreSQL... (Isso pode levar um momento)")
        
        df.to_sql('employees', engine, if_exists='replace', index=False)

        print("‚úÖ Migra√ß√£o conclu√≠da com sucesso!")

    except FileNotFoundError:
        print(f"‚ùå Erro: Arquivo do banco de dados SQLite n√£o encontrado em {SQLITE_DB_PATH}.")
    except Exception as e:
        print(f"‚ùå Ocorreu um erro inesperado durante a migra√ß√£o: {e}")

if __name__ == "__main__":
    migrate_data()
