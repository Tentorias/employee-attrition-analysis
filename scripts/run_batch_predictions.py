# scripts/run_batch_predictions.py

import os
import time
import pandas as pd
import requests
from sqlalchemy import create_engine
from dotenv import load_dotenv
from tqdm import tqdm  # Biblioteca para barras de progresso

def run_batch_predictions():
    """
    L√™ todos os funcion√°rios do banco de dados e solicita uma predi√ß√£o para cada um
    atrav√©s da API local, populando a tabela 'predictions'.
    """
    load_dotenv()
    db_url = os.getenv("DATABASE_URL")
    api_url = "http://127.0.0.1:8000/predict" # URL da sua API local

    if not db_url:
        print("‚ùå DATABASE_URL n√£o encontrada. Verifique seu arquivo .env.")
        return

    print("üîå Conectando ao banco de dados para buscar a lista de funcion√°rios...")
    engine = create_engine(db_url)
    try:
        df = pd.read_sql("SELECT * FROM employees", engine)
        print(f"‚úÖ Encontrados {len(df)} funcion√°rios para processar.")
    except Exception as e:
        print(f"‚ùå Erro ao ler a tabela 'employees': {e}")
        return

    # Limpa a tabela de predi√ß√µes antigas para come√ßar do zero
    try:
        with engine.connect() as conn:
            conn.execute(requests.text("TRUNCATE TABLE predictions RESTART IDENTITY;"))
            print("üßπ Tabela 'predictions' limpa com sucesso.")
    except Exception:
        print("‚ÑπÔ∏è Tabela 'predictions' n√£o encontrada ou n√£o p√¥de ser limpa. Ser√° criada pela API.")

    print(f"\nüöÄ Iniciando predi√ß√µes em lote via API em {api_url}...")

    # Itera sobre cada funcion√°rio com uma barra de progresso (tqdm)
    for index, row in tqdm(df.iterrows(), total=df.shape[0], desc="Processando funcion√°rios"):
        # Converte a linha do DataFrame para o formato JSON que a API espera
        payload = row.to_dict()

        try:
            # Envia a requisi√ß√£o POST para a API
            response = requests.post(api_url, json=payload)
            if response.status_code != 200:
                # Imprime um erro se a API n√£o responder com sucesso
                print(f"\n‚ö†Ô∏è Erro na API para o funcion√°rio {payload.get('EmployeeNumber')}: {response.text}")
        except requests.exceptions.ConnectionError as e:
            print(f"\n‚ùå Erro de conex√£o com a API. A API est√° rodando em {api_url}? Detalhes: {e}")
            break # Interrompe o script se a API n√£o estiver acess√≠vel
        
        time.sleep(0.05) # Pausa pequena para n√£o sobrecarregar a API

    print("\n‚úÖ Predi√ß√µes em lote conclu√≠das! Verifique seu dashboard.")


if __name__ == "__main__":
    # Instale a depend√™ncia 'tqdm' se n√£o tiver: poetry add tqdm
    run_batch_predictions()